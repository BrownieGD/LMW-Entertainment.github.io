%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2370 331
%%HiResBoundingBox: 0 0 2370 330.95999
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2370 330.95999 re
W
q
[0.24 0 0 -0.24 0 330.95999] cm
q
0 0 9875 1378.125 re
W*
q
[16.615372 0 0 16.617546 83.981071 134.027725] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
56.583496 33.210938 m
28.827148 33.210938 l
28.274902 33.210938 27.827148 32.763184 27.827148 32.210938 c
27.827148 12.527344 l
27.827148 11.133789 28.960938 10 30.354492 10 c
55.056152 10 l
56.449707 10 57.583496 11.133789 57.583496 12.527344 c
57.583496 32.210938 l
57.583496 32.763184 57.135742 33.210938 56.583496 33.210938 c
h
29.827148 31.210938 m
55.583496 31.210938 l
55.583496 12.527344 l
55.583496 12.236328 55.347168 12 55.056152 12 c
30.354492 12 l
30.063477 12 29.827148 12.236328 29.827148 12.527344 c
29.827148 31.210938 l
h
f
55.241211 37.049316 m
30.178711 37.049316 l
27.554688 37.049316 25.419922 35.339355 25.419922 33.237793 c
25.419922 32.210938 l
25.419922 31.658691 25.867676 31.210938 26.419922 31.210938 c
59 31.210938 l
59.552246 31.210938 60 31.658691 60 32.210938 c
60 33.237793 l
60 35.339355 57.865234 37.049316 55.241211 37.049316 c
h
27.419922 33.210938 m
27.419922 33.237793 l
27.419922 34.219727 28.683105 35.049316 30.178711 35.049316 c
55.241211 35.049316 l
56.736816 35.049316 58 34.219727 58 33.237793 c
58 33.210938 l
27.419922 33.210938 l
h
f
56.583496 33.210938 m
28.827148 33.210938 l
28.274902 33.210938 27.827148 32.763184 27.827148 32.210938 c
27.827148 12.527344 l
27.827148 11.133789 28.960938 10 30.354492 10 c
55.056152 10 l
56.449707 10 57.583496 11.133789 57.583496 12.527344 c
57.583496 32.210938 l
57.583496 32.763184 57.135742 33.210938 56.583496 33.210938 c
h
29.827148 31.210938 m
55.583496 31.210938 l
55.583496 12.527344 l
55.583496 12.236328 55.347168 12 55.056152 12 c
30.354492 12 l
30.063477 12 29.827148 12.236328 29.827148 12.527344 c
29.827148 31.210938 l
h
f
55.241211 37.049316 m
30.178711 37.049316 l
27.554688 37.049316 25.419922 35.339355 25.419922 33.237793 c
25.419922 32.210938 l
25.419922 31.658691 25.867676 31.210938 26.419922 31.210938 c
59 31.210938 l
59.552246 31.210938 60 31.658691 60 32.210938 c
60 33.237793 l
60 35.339355 57.865234 37.049316 55.241211 37.049316 c
h
27.419922 33.210938 m
27.419922 33.237793 l
27.419922 34.219727 28.683105 35.049316 30.178711 35.049316 c
55.241211 35.049316 l
56.736816 35.049316 58 34.219727 58 33.237793 c
58 33.210938 l
27.419922 33.210938 l
h
f
51.552246 60 m
18.435547 60 l
13.78418 60 10 55.791016 10 50.617188 c
10 45.617188 13.534668 41.518066 17.970215 41.248535 c
18.969727 35.429199 23.375 30.945313 28.732422 30.436523 c
29.018066 30.411621 29.291504 30.503906 29.5 30.692383 c
29.708496 30.881836 29.827148 31.150391 29.827148 31.432129 c
29.827148 32.210938 l
29.827148 32.763184 29.379395 33.210938 28.827148 33.210938 c
27.419922 33.237793 l
27.419922 34.219727 28.683105 35.049316 30.178711 35.049316 c
48.95459 35.049316 l
49.169922 35.049316 49.379883 35.119141 49.552734 35.248047 c
51.593262 36.770508 53.09668 39.006348 53.830078 41.59082 c
57.44043 42.698242 60 46.388672 60 50.617188 c
60 55.791016 56.210449 60 51.552246 60 c
h
18.435547 43.234375 m
14.887207 43.234375 12 46.546387 12 50.617188 c
12 54.687988 14.887207 58 18.435547 58 c
51.552246 58 l
55.107422 58 58 54.687988 58 50.617188 c
58 47.087891 55.811035 44.046387 52.794434 43.384766 c
52.418457 43.302246 52.122559 43.01123 52.035156 42.635742 c
51.506348 40.374512 50.296387 38.40332 48.612793 37.049316 c
30.178711 37.049316 l
27.67041 37.049316 25.608887 35.486816 25.432129 33.513184 c
22.438477 35.15918 20.255371 38.456543 19.832031 42.368652 c
19.801758 42.648926 19.654297 42.90332 19.426758 43.069336 c
19.19873 43.23584 18.911133 43.295898 18.635254 43.240723 c
18.605469 43.234375 18.507324 43.234375 18.435547 43.234375 c
h
f
48.65625 26.308594 m
48.400391 26.308594 48.14502 26.210938 47.949707 26.016113 c
47.559082 25.625977 47.558594 24.992676 47.94873 24.602051 c
50.810547 21.736328 l
47.949219 18.875 l
47.558594 18.484375 47.558594 17.851563 47.949219 17.460938 c
48.339844 17.070313 48.972656 17.070313 49.363281 17.460938 c
52.931152 21.028809 l
53.321777 21.418945 53.321777 22.051758 52.931641 22.442383 c
49.36377 26.015137 l
49.168457 26.210938 48.912598 26.308594 48.65625 26.308594 c
h
f
36.754395 26.308594 m
36.498047 26.308594 36.242188 26.210938 36.046875 26.015137 c
32.479004 22.442383 l
32.088867 22.051758 32.088867 21.418945 32.479492 21.028809 c
36.047363 17.460938 l
36.437988 17.070313 37.070801 17.070313 37.461426 17.460938 c
37.852051 17.851563 37.852051 18.484375 37.461426 18.875 c
34.600098 21.736328 l
37.461914 24.602051 l
37.852051 24.992676 37.852051 25.625977 37.460938 26.016113 c
37.265625 26.210938 37.010254 26.308594 36.754395 26.308594 c
h
f
39.239746 29.38623 m
39.083984 29.38623 38.92627 29.350098 38.77832 29.272949 c
38.288574 29.017578 38.098633 28.414063 38.354004 27.923828 c
45.421875 14.361816 l
45.677734 13.872559 46.28125 13.681641 46.770996 13.9375 c
47.260742 14.192871 47.450684 14.796387 47.195313 15.286621 c
40.127441 28.848633 l
39.949219 29.19043 39.600586 29.38623 39.239746 29.38623 c
h
f
Q
q
[45.570747 0 0 45.57671 1662.63708 141.900665] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
3.82 5.12 m
3.82 20 l
0.84 20 l
0.84 5.12 l
3.82 5.12 l
h
21.663897 20 m
18.683897 20 l
18.683897 14.360001 l
18.683897 12.84 18.263897 12.200001 17.143898 12.200001 c
15.943898 12.200001 15.243898 12.840001 15.243898 14.360001 c
15.243898 20 l
12.263899 20 l
12.263899 14.360001 l
12.263899 12.84 11.863899 12.200001 10.723899 12.200001 c
9.523899 12.200001 8.803899 12.840001 8.803899 14.360001 c
8.803899 20 l
5.843899 20 l
5.843899 10.12 l
8.803899 10.12 l
8.803899 11.02 l
9.503899 10.32 10.563899 9.98 11.503899 9.98 c
12.903898 9.98 13.803899 10.5 14.443899 11.32 c
14.983899 10.66 16.1439 10.06 17.8839 9.98 c
20.6639 9.98 21.6639 11.299999 21.6639 14.36 c
21.6639 20 l
21.663897 20 l
h
34.387791 10.12 m
37.407791 10.12 l
33.647793 20 l
31.707792 20 l
29.867792 15.22 l
29.247791 16.880001 28.647793 18.440001 28.067793 20 c
26.107792 20 l
22.327791 10.12 l
25.36779 10.12 l
27.08779 15.56 l
28.78779 10.119999 l
30.967791 10.119999 l
32.667789 15.579999 l
34.387791 10.12 l
h
46.271687 13.42 m
46.271687 15.940001 l
38.471687 15.940001 l
38.471687 13.42 l
46.271687 13.42 l
h
58.115582 15.08 m
58.115582 15.74 l
51.075581 15.74 l
51.075581 16.9 52.255581 17.719999 53.23558 17.719999 c
54.19558 17.719999 55.075581 17.34 55.53558 16.5 c
57.515579 18.32 l
56.71558 19.4 55.495579 20.16 53.23558 20.16 c
49.995579 20.16 48.015579 18 48.015579 15.08 c
48.015579 12.16 49.935577 9.98 53.05558 9.98 c
56.175583 9.98 58.115582 12.12 58.115582 15.08 c
h
51.135582 13.86 m
55.015583 13.86 l
54.855583 12.92 54.175583 12.42 53.055584 12.42 c
51.975582 12.42 51.315582 13 51.135582 13.860001 c
51.135582 13.86 l
h
68.539482 14.36 m
68.539482 20 l
65.579483 20 l
65.579483 14.360001 l
65.579483 12.860001 65.179482 12.200001 64.019485 12.200001 c
62.819485 12.200001 62.119484 12.860001 62.119484 14.360001 c
62.119484 20 l
59.159485 20 l
59.159485 10.12 l
62.119484 10.12 l
62.119484 11.06 l
62.879482 10.32 63.919483 9.98 64.779488 9.98 c
67.559486 9.98 68.53949 11.32 68.53949 14.36 c
68.539482 14.36 l
h
73.623375 15.8 m
73.623375 16.52 73.603378 17.720001 74.703377 17.720001 c
75.243378 17.720001 75.583374 17.500002 75.963379 17.220001 c
75.963379 19.660002 l
75.50338 19.920002 74.943382 20.160002 74.343376 20.160002 c
71.803375 20.160002 70.663376 19.080002 70.663376 15.800001 c
70.663376 12.560001 l
69.563377 12.560001 l
69.563377 10.120001 l
70.663376 10.120001 l
70.663376 7.280001 l
73.623375 7.280001 l
73.623375 10.120001 l
75.963371 10.120001 l
75.963371 12.560001 l
73.623375 12.560001 l
73.623375 15.800001 l
73.623375 15.8 l
h
87.687271 15.08 m
87.687271 15.74 l
80.64727 15.74 l
80.64727 16.9 81.827271 17.719999 82.807274 17.719999 c
83.767273 17.719999 84.64727 17.34 85.107277 16.5 c
87.08728 18.32 l
86.287277 19.4 85.067284 20.16 82.807281 20.16 c
79.567284 20.16 77.58728 18 77.58728 15.08 c
77.58728 12.16 79.507278 9.98 82.627281 9.98 c
85.747284 9.98 87.687279 12.12 87.687279 15.08 c
87.687271 15.08 l
h
80.707268 13.86 m
84.587265 13.86 l
84.427261 12.92 83.747269 12.42 82.627266 12.42 c
81.547264 12.42 80.887268 13 80.707268 13.860001 c
80.707268 13.86 l
h
95.431168 10.26 m
95.031166 12.480001 l
94.291168 12.160001 94.151169 12.22 93.811165 12.22 c
92.611168 12.22 91.911163 12.860001 91.911163 14.440001 c
91.911163 20 l
88.951164 20 l
88.951164 10.12 l
91.911163 10.12 l
91.911163 11 l
92.291161 10.32 93.331161 9.98 93.991165 9.98 c
94.611168 9.98 94.971169 10 95.431168 10.259999 c
95.431168 10.26 l
h
99.375061 15.8 m
99.375061 16.52 99.355064 17.720001 100.455063 17.720001 c
100.995064 17.720001 101.33506 17.500002 101.715065 17.220001 c
101.715065 19.660002 l
101.255066 19.920002 100.695068 20.160002 100.095062 20.160002 c
97.555061 20.160002 96.415062 19.080002 96.415062 15.800001 c
96.415062 12.560001 l
95.315063 12.560001 l
95.315063 10.120001 l
96.415062 10.120001 l
96.415062 7.280001 l
99.375061 7.280001 l
99.375061 10.120001 l
101.715057 10.120001 l
101.715057 12.560001 l
99.375061 12.560001 l
99.375061 15.800001 l
99.375061 15.8 l
h
105.87896 13.04 m
103.678963 11.78 l
104.778961 10.54 106.258965 9.96 107.798965 9.96 c
110.758965 9.96 111.958969 11.58 111.958969 13.1 c
111.958969 20 l
108.99897 20 l
108.99897 19.299999 l
108.538971 19.779999 107.718971 20.139999 106.798973 20.139999 c
104.098976 20.139999 103.058975 18.939999 103.058975 17.099998 c
103.058975 15.019999 104.738976 13.619999 107.458977 13.619999 c
108.998978 13.619999 l
108.998978 12.879999 108.43898 12.399999 107.598976 12.399999 c
106.738976 12.399999 106.318977 12.559999 105.878975 13.039999 c
105.87896 13.04 l
h
108.998955 16.74 m
108.998955 15.86 l
107.258957 15.86 l
106.478958 15.86 105.898956 16.4 106.018959 17.16 c
106.098961 17.700001 106.578957 17.92 107.258957 17.92 c
108.55896 17.92 108.998955 17.18 108.998955 16.74 c
h
116.682854 10.12 m
116.682854 20 l
113.722855 20 l
113.722855 10.12 l
116.682854 10.12 l
h
116.762856 7.28 m
116.762856 8.12 116.082855 8.780001 115.182854 8.780001 c
114.322853 8.780001 113.622856 8.120001 113.622856 7.280001 c
113.622856 6.460001 114.322853 5.820001 115.182854 5.820001 c
116.082855 5.820001 116.762856 6.460001 116.762856 7.280001 c
116.762856 7.28 l
h
127.586746 14.36 m
127.586746 20 l
124.626747 20 l
124.626747 14.360001 l
124.626747 12.860001 124.226746 12.200001 123.06675 12.200001 c
121.866753 12.200001 121.166748 12.860001 121.166748 14.360001 c
121.166748 20 l
118.206749 20 l
118.206749 10.12 l
121.166748 10.12 l
121.166748 11.06 l
121.92675 10.32 122.966751 9.98 123.826752 9.98 c
126.60675 9.98 127.586754 11.32 127.586754 14.36 c
127.586746 14.36 l
h
145.170639 20 m
142.190643 20 l
142.190643 14.360001 l
142.190643 12.84 141.770645 12.200001 140.65065 12.200001 c
139.450653 12.200001 138.750656 12.840001 138.750656 14.360001 c
138.750656 20 l
135.77066 20 l
135.77066 14.360001 l
135.77066 12.84 135.370667 12.200001 134.230667 12.200001 c
133.03067 12.200001 132.310669 12.840001 132.310669 14.360001 c
132.310669 20 l
129.350662 20 l
129.350662 10.12 l
132.310669 10.12 l
132.310669 11.02 l
133.010666 10.32 134.070663 9.98 135.010666 9.98 c
136.41066 9.98 137.310669 10.5 137.950668 11.32 c
138.490662 10.66 139.650665 10.06 141.390671 9.98 c
144.17067 9.98 145.17067 11.299999 145.17067 14.36 c
145.17067 20 l
145.170639 20 l
h
156.874542 15.08 m
156.874542 15.74 l
149.834549 15.74 l
149.834549 16.9 151.014542 17.719999 151.994553 17.719999 c
152.954559 17.719999 153.834549 17.34 154.294556 16.5 c
156.274551 18.32 l
155.474548 19.4 154.254547 20.16 151.994553 20.16 c
148.754547 20.16 146.774551 18 146.774551 15.08 c
146.774551 12.16 148.69455 9.98 151.814545 9.98 c
154.93454 9.98 156.874542 12.12 156.874542 15.08 c
h
149.894547 13.86 m
153.774551 13.86 l
153.614548 12.92 152.934555 12.42 151.814545 12.42 c
150.734543 12.42 150.074539 13 149.894547 13.860001 c
149.894547 13.86 l
h
167.298431 14.36 m
167.298431 20 l
164.338425 20 l
164.338425 14.360001 l
164.338425 12.860001 163.938431 12.200001 162.778427 12.200001 c
161.57843 12.200001 160.878433 12.860001 160.878433 14.360001 c
160.878433 20 l
157.918427 20 l
157.918427 10.12 l
160.878433 10.12 l
160.878433 11.06 l
161.638428 10.32 162.678436 9.98 163.538437 9.98 c
166.318436 9.98 167.298431 11.32 167.298431 14.36 c
h
172.38234 15.8 m
172.38234 16.52 172.36234 17.720001 173.46234 17.720001 c
174.00233 17.720001 174.34235 17.500002 174.72234 17.220001 c
174.72234 19.660002 l
174.26233 19.920002 173.70233 20.160002 173.10234 20.160002 c
170.56235 20.160002 169.42235 19.080002 169.42235 15.800001 c
169.42235 12.560001 l
168.32234 12.560001 l
168.32234 10.120001 l
169.42235 10.120001 l
169.42235 7.280001 l
172.38235 7.280001 l
172.38235 10.120001 l
174.72235 10.120001 l
174.72235 12.560001 l
172.38235 12.560001 l
172.38235 15.800001 l
172.38234 15.8 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
